datasource db {
    provider = "mysql"
    url      = env("DATABASE_URL")
}

generator client {
    provider = "prisma-client-js"
}

model Customer {
    customer_id      Int              @id @default(autoincrement())
    uuid             String           @unique @default(dbgenerated("(replace(uuid(),'-',''))"))
    status           Int              @default(1)
    customer_group   CustomerGroup?   @relation(fields: [group_id], references: [customer_group_id])
    group_id         Int?
    email            String           @unique
    password         String
    full_name        String?
    created_at       DateTime         @default(now())
    updated_at       DateTime         @default(now()) @updatedAt
    customer_address CustomerAddress?

    @@map("customer")
}

model CustomerAddress {
    customer_address_id Int      @id @default(autoincrement())
    uuid                String   @unique @default(dbgenerated("(replace(uuid(),'-',''))"))
    customer            Customer @relation(fields: [customer_id], references: [customer_id])
    customer_id         Int      @unique
    full_name           String?
    telephone           String?
    address_1           String?
    address_2           String?
    postcode            String?
    city                String?
    province            String?
    country             String
    created_at          DateTime @default(now())
    updated_at          DateTime @default(now()) @updatedAt
    is_default          Int?

    @@index([customer_id], name: "FK_CUSTOMER_ADDRESS_LINK")
    @@map("customer_address")
}

model CustomerGroup {
    customer_group_id Int        @id @unique
    uuid              String     @unique @default(dbgenerated("(replace(uuid(),'-',''))"))
    group_name        String
    created_at        DateTime   @default(now())
    updated_at        DateTime   @default(now()) @updatedAt
    row_id            Int        @unique @default(autoincrement())
    customer          Customer[]

    @@index([row_id])
    @@map("customer_group")
}

model UserTokenSecret {
    user_token_secret_id Int      @id @default(autoincrement())
    user_id              String
    sid                  String
    secret               String
    created_at           DateTime @default(now())
    updated_at           DateTime @default(now()) @updatedAt

    @@unique([user_id], name: "USER_TOKEN_USER_ID")
    @@map("user_token_secret")
}

model Product {
    product_id         Int             @id @default(autoincrement())
    uuid               String          @unique @default(dbgenerated("(replace(uuid(),'-',''))"))
    variant_group      VariantGroup?   @relation(fields: [variant_group_id], references: [variant_group_id])
    variant_group_id   Int?
    visibility         Int?
    attribute_group    AtrributeGroup? @relation(fields: [group_id], references: [attribute_group_id])
    group_id           Int?
    image              Int?
    sku                String          @unique
    price              Float
    qty                Int
    weight             Float?
    manage_stock       Boolean
    stock_availability Boolean
    tax_class          Int?
    status             Boolean
    created_at         DateTime        @default(now())
    updated_at         DateTime        @default(now()) @updatedAt

    @@map("product")
}

model VariantGroup {
    variant_group_id   Int       @id @default(autoincrement())
    uuid               String    @unique @default(dbgenerated("(replace(uuid(),'-',''))"))
    attribute_group_id Int
    attribute_one      Int?
    attribute_two      Int?
    attribute_three    Int?
    attribute_four     Int?
    attribute_five     Int?
    visibility         Int       @default(0)
    Product            Product[]

    @@map("variant_group")
}

model AtrributeGroup {
    attribute_group_id Int       @id @default(autoincrement())
    group_name         String
    created_at         DateTime  @default(now())
    updated_at         DateTime  @default(now()) @updatedAt
    Product            Product[]

    @@map("attribute_group")
}
